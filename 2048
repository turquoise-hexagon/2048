#!/usr/bin/env bash
#
# 2048 but in bash

new() {
    # generate a brand new cell
    while :; do
        ((x = RANDOM % 4, y = RANDOM % 4))
        ((g[$x,$y])) || break
    done

    g[$x,$y]=2
}

check() {
    c=

    for i in {0..3},{0..3}; do
        ((g[$i] && c++, g[$i] == 2048)) && exit
    done

    ((c == 16)) && exit
}

display() {
    printf '\e[H'

    for i in {0..3},{0..3}; do
        c=

        for a in {4,10}{0..5}; do
            ((c == g[$i])) && # get the right color
                printf '\e[%sm%4s\e[m' "$a" "${g[$i]}"

            ((c = c ? c * 2 : 2))
        done

        ((${i#??} == 3)) && printf '\n'
    done
}

template() {
    case $1 in
        h) a='0..3'; b='k = j + 1; k <  4; k++'; c='$i,$j'; d='$i,$k';;
        j) a='3..0'; b='k = j - 1; k >= 0; k--'; c='$j,$i'; d='$k,$i';;
        k) a='0..3'; b='k = j + 1; k <  4; k++'; c='$j,$i'; d='$k,$i';;
        l) a='3..0'; b='k = j - 1; k >= 0; k--'; c='$i,$j'; d='$i,$k';;
    esac

    eval "
    push_$1() {
        for i in {0..3}; do
            # merge tiles
            for j in {$a}; do
                for (($b)) do
                    ((g[$c] == g[$d])) && { ((g[$c] += g[$d], g[$d] = 0)); break; }
                    ((g[$d])) && break
                done
            done

            # push tiles
            for j in {$a}; do
                ((g[$c])) ||
                    for (($b)) do
                        ((g[$d])) && { ((g[$c] = g[$d], g[$d] = 0)); break; }
                    done
            done
        done
    }"
}

printf '\e[2J\e[?25l'
trap $'printf \e[?25h' EXIT

declare -A g t

# init array
for i in {0..3},{0..3}; do
    g[$i]=0
done; new

# init functions
for key in h j k l; do
    template "$key"
done

while display; read -rsn 1 key; do
    # save current state
    for i in "${!g[@]}"; do
        t[$i]=${g[$i]}
    done

    [[ $key =~ [hjkl] ]] && { "push_$key"; check; }

    # compare with new state
    for i in "${!g[@]}"; do
        ((t[$i] != g[$i])) && { new; break; }
    done
done
