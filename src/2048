#!/usr/bin/env bash
#
# 2048 - 2048 implementation

new() {
    # init a brand new cell
    for ((;;)) {
        ((
            x = RANDOM % 4,
            y = RANDOM % 4
        ))

        ((game[$x $y])) || break
    }

    ((game[$x $y] = 2))
}

check() {
    # check if the game is finished
    ((cpt = 0))

    for i in {0..3}; {
        for j in {0..3}; {
            ((
                game[$i $j] || cpt++,
                game[$i $j] == 8192
            )) &&
                exit
        }
    }

    ((cpt)) || exit
}

display() {
    out='\e[H'

    for i in {0..3}; {
        for j in {0..3}; {
            # pick the right color
            ((t = game[$i $j]))

            printf -v out '%s\e[%sm%4s\e[m' \
                "$out" "${colors[t]}" "$t"
        }

        out+='\n'
    }

    printf '%b' "$out"
}

template() {
    case $1 in
        h) a='0..3'; b='k = j + 1; k <  4; k++'; c='$i $j'; d='$i $k';;
        j) a='3..0'; b='k = j - 1; k >= 0; k--'; c='$j $i'; d='$k $i';;
        k) a='0..3'; b='k = j + 1; k <  4; k++'; c='$j $i'; d='$k $i';;
        l) a='3..0'; b='k = j - 1; k >= 0; k--'; c='$i $j'; d='$i $k';;
    esac

    eval "
    push_$1() {
        for i in {0..3}; {
            # merge tiles
            for j in {$a}; {
                for (($b)) {
                    ((game[$c] == game[$d])) && {
                        ((
                            game[$c] += game[$d],
                            game[$d] = 0
                        ))

                        break
                    }

                    ((game[$d])) && break
                }
            }

            # push tiles
            for j in {$a}; {
                ((game[$c])) ||
                    for (($b)) {
                        ((game[$d])) && {
                            ((
                                game[$c] = game[$d],
                                game[$d] = 0
                            ))

                            break
                        }
                    }
            }
        }
    }"
}

# init colors
((t = 1))

for i in {4,10}{1..6}; {
    ((colors[t *= 2] = i))
}

# init functions
for key in h j k l; {
    template "$key"
}

# init array
declare -A game copy

for i in {0..3}; {
    for j in {0..3}; {
        ((game[$i $j] = 0))
    }
}

new

# hide ui
printf '\e[2J\e[?25l'
trap 'printf "\e[?25h\n"' EXIT

while display; read -rsn 1 key; do
    # save state
    for i in "${!game[@]}"; {
        ((copy[$i] = game[$i]))
    }

    [[ $key =~ [hjkl] ]] && {
        push_"$key"

        check
    }

    # compare state
    for i in "${!game[@]}"; {
        ((copy[$i] != game[$i])) && {
            new

            break
        }
    }
done
